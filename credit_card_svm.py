# -*- coding: utf-8 -*-
"""Credit Card SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Sd-2IHVjjSO9emLk5V6LfDCZhYdZ7T-
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('/content/drive/MyDrive/PORTOFOLIO/data/creditcard.csv')
df.head()

df.isna().sum()

df.info()

df.describe(include="all")

X = df.drop(columns="Class")
y = df.Class

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

# Definisi ColumnTransformer
preprocessor = ColumnTransformer([
    ('numeric', StandardScaler(), X_train.columns),  # Menggunakan StandardScaler untuk penskalaan
])
# Definisi Pipeline
pipeline = Pipeline([
    ('prep', preprocessor),
    ('algo', SVC(max_iter=500))
])

# Definisi parameter untuk pencarian grid
param_grid = {
    'algo__gamma': [1e-03, 1e-02, 1e-01, 1e+00, 1e+01, 1e+02, 1e+03],
    'algo__C': [1e-03, 1e-02, 1e-01, 1e+00, 1e+01, 1e+02, 1e+03]
}

# Memisahkan data menjadi data pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Definisi model GridSearchCV
model = GridSearchCV(pipeline, param_grid, cv=3, n_jobs=-1, verbose=1,)
model.fit(X_train, y_train)

# Menampilkan hasil terbaik
print("Best parameters:", model.best_params_)
print("Train score:", model.score(X_train, y_train))
print("Validation score:", model.best_score_)
print("Test score:", model.score(X_test, y_test))



"""# **Setiap kali mendapatkan score tinggi kita harus curiga**
### apakah terjadi data leakage ?
### apakah datasetnya Imbalance ?
### atau datanya memang problem sesuatu yang sederhana

# **Oke kita cek satu-satu dari atas!**
"""

df.Class.value_counts()



"""Dan memang disini datanya tidak balance yah! dan kalau imbalance jangan pakai akurasi yang jadi acuan tetapi pakai F1-Score**"""



"""Perbedaan dengan model yang diatas disini saya tambahin parameter untuk bobotin weight, dan kita tuning untuk mencari yang terbaik nya"""

# Definisi ColumnTransformer
preprocessor = ColumnTransformer([
    ('numeric', StandardScaler(), X_train.columns),  # Menggunakan StandardScaler untuk penskalaan
])
# Definisi Pipeline
pipeline = Pipeline([
    ('prep', preprocessor),
    ('algo', SVC(max_iter=500))
])

# Definisi parameter untuk pencarian grid
param_grid = {
    'algo__gamma': [1e-03, 1e-02, 1e-01, 1e+00, 1e+01, 1e+02, 1e+03],
    'algo__C': [1e-03, 1e-02, 1e-01, 1e+00, 1e+01, 1e+02, 1e+03],
    'algo__class_weight': [{0: x, 1: 1 - x} for x in [0.05, 0.1, 0.3, 0.7]]
}

# Memisahkan data menjadi data pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Definisi model GridSearchCV
model = GridSearchCV(pipeline, param_grid, cv=3, n_jobs=-1, verbose=1, scoring="f1")
model.fit(X_train, y_train)

# Menampilkan hasil terbaik
print("Best parameters:", model.best_params_)
print("Train score:", model.score(X_train, y_train))
print("Validation score:", model.best_score_)
print("Test score:", model.score(X_test, y_test))

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Model sudah didefinisikan sebelumnya (model SVM dengan parameter terbaik)

# Prediksi label pada data pelatihan dan pengujian
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Membuat matriks konfusi untuk data pelatihan
confusion_train = confusion_matrix(y_train, y_train_pred)

# Membuat matriks konfusi untuk data pengujian
confusion_test = confusion_matrix(y_test, y_test_pred)

# Plot heatmap dan matriks konfusi secara terpisah
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Heatmap data pelatihan
sns.heatmap(confusion_train, annot=True, fmt="d", cmap="Blues", cbar=False, ax=axes[0])
axes[0].set_xlabel('Predicted')
axes[0].set_ylabel('Actual')
axes[0].set_title('Confusion Matrix (Train Data)')

# Heatmap data pengujian
sns.heatmap(confusion_test, annot=True, fmt="d", cmap="Blues", cbar=False, ax=axes[1])
axes[1].set_xlabel('Predicted')
axes[1].set_ylabel('Actual')
axes[1].set_title('Confusion Matrix (Test Data)')

plt.tight_layout()
plt.show()

